Q - Steps by Knight

class Solution 
{
    public:
    //Function to find out minimum steps Knight needs to reach target position.
	  bool isInside(int x, int y, int N)
{
    if (x >= 1 && x <= N && y >= 1 && y <= N)
        return true;
    return false;
}

    //Function to find out minimum steps Knight needs to reach target position.
	int minStepToReachTarget(vector<int>&knightPos,vector<int>&targetPos,int N)
	{
	    // Code here
    // x and y direction, where a knight can move
        int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };
        int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
    
        // queue for storing states of knight in board
        queue<vector<int>> q;
    
        // push starting position of knight with 0 distance
        q.push({knightPos[0], knightPos[1], 0});
    
        vector<int> t;
        int x, y;
        bool visit[N + 1][N + 1];
    
        // make all cell unvisited
        for (int i = 1; i <= N; i++)
            for (int j = 1; j <= N; j++)
                visit[i][j] = false;
    
        // visit starting state
        visit[knightPos[0]][knightPos[1]] = true;
    
        // loop until we have one element in queue
        while (!q.empty()) {
            t = q.front();
            q.pop();
    
            // if current cell is equal to target cell,
            // return its distance
            if (t[0] == targetPos[0] && t[1] == targetPos[1])
                return t[2];
    
            // loop for all reachable states
            for (int i = 0; i < 8; i++) {
                x = t[0] + dx[i];
                y = t[1] + dy[i];
    
                // If reachable state is not yet visited and
                // inside board, push that state into queue
                if (isInside(x, y, N) && !visit[x][y]) {
                    visit[x][y] = true;
                    q.push({x, y, t[2] + 1});
                }
            }
        }
	}
};
