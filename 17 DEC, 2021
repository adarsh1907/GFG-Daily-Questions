Q - Huffman Encoding

struct Node {
            int data;
            Node* left;
            Node* right;
            Node(int val)
            {
               data = val;
               left = NULL;
               right = NULL;
            }
        };
		struct compare {
            bool operator()(Node* left, Node* right){
                return (left->data > right->data);
            }
        };
        void preorder(vector<string> &res, Node *root, string s)
        {
            if (root == NULL) return;
            if (root->left == NULL && root->right == NULL) res.push_back(s);
            preorder(res, root->left , s + "0");
            preorder(res, root->right , s + "1");
        }
    	vector<string> huffmanCodes(string S,vector<int> f,int N)
    	{
    	    priority_queue<Node* , vector<Node*>, compare> pq;
            for (int i = 0; i < f.size(); i++)
            {
                Node *temp = new Node(f[i]);
                pq.push(temp);
            }
            vector<string> res;
            for (int i = 1; i < N; i++)
            {
                Node *res1 = pq.top();
                pq.pop();
                Node *res2 = pq.top();
                pq.pop();
                Node *temp = new Node(res1->data + res2->data);
                temp->left = res1;
                temp->right = res2;
                pq.push(temp);
            }
            preorder(res, pq.top() , "");
            return res;
	    }
